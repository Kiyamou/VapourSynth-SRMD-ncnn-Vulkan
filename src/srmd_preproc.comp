
#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#define sfp float16_t
#else
#define sfp float
#endif

#if NCNN_int8_storage
#extension GL_EXT_shader_8bit_storage: require
#endif

layout (constant_id = 0) const int bgr = 0;

#if NCNN_int8_storage
layout (binding = 0) readonly buffer bottom_blob { uint8_t bottom_blob_data[]; };
#else
layout (binding = 0) readonly buffer bottom_blob { float bottom_blob_data[]; };
#endif
layout (binding = 1) writeonly buffer top_blob { sfp top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;

    int outw;
    int outh;
    int outcstep;

    int pad_top;
    int pad_left;

    int crop_x;
    int crop_y;

    int noise_level;

    int channels;
} p;

const float degradation_vector[15] = float[15](
    -1.12360956e-08,
    -1.36899159e-08,
    1.85637958e-02,
    2.86066886e-08,
    3.35292965e-02,
    8.37272935e-08,
    -2.54424009e-07,
    -3.16234976e-02,
    -1.35169253e-02,
    -1.10466090e-08,
    3.84753793e-02,
    3.79465739e-08,
    -2.44916752e-01,
    -8.02213490e-01,
    -5.40549755e-01
);

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.outw || gy >= p.outh || gz >= p.channels + (p.noise_level == -1 ? 15 : 16))
        return;

    if (p.noise_level != -1 && gz == p.channels + 15)
    {
        top_blob_data[(gz - (p.channels - 3)) * p.outcstep + gy * p.outw + gx] = sfp(float(p.noise_level) / 255.f);
        return;
    }

    if (gz >= p.channels)
    {
        top_blob_data[(gz - (p.channels - 3)) * p.outcstep + gy * p.outw + gx] = sfp(degradation_vector[gz - p.channels]);
        return;
    }

    int x = gx + p.crop_x - p.pad_left;
    int y = gy + p.crop_y - p.pad_top;

    x = clamp(x, 0, p.w - 1);
    y = clamp(y, 0, p.h - 1);

#if NCNN_int8_storage
    int v_offset = y * p.w + x;

    float v;

    if (bgr == 1 && gz != 3)
        v = float(uint(bottom_blob_data[v_offset * p.channels + 2 - gz]));
    else
        v = float(uint(bottom_blob_data[v_offset * p.channels + gz]));
#else
    int v_offset = gz * p.cstep + y * p.w + x;

    float v = bottom_blob_data[v_offset];
#endif

    if (gz == 3)
    {
        gx -= p.pad_left;
        gy -= p.pad_top;
    }
    else
    {
        const float norm_val = 1 / 255.f;

        top_blob_data[gz * p.outcstep + gy * p.outw + gx] = sfp(v * norm_val);
    }
}
